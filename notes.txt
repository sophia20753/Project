cust instruction: SetKernelSize
    opcode (0-6): 0b0001011 (custom-0)
    rd (7-11): X
    funct3 (12-14): 0b000
    rs1 (15-19): kernel size
        Size of the kernel, 0: 1x1, 1: 3x3, 2: 5x5
    rs2 (20-24): X
    funct7 (25-31): 0b0000100
cust instruction: LoadInput
    opcode (0-6): 0b0001011 (custom-0)
    rd (7-11): X
    funct3 (12-14): 0b011
    rs1 (15-19): ptr to memory address of packed input values
        val1 | val2 | val3 | val4
        each 16 bit fixed point 8.8 value is packed into a 64 bit word as above
    rs2 (20-24): (input index of val1) / 4
        e.g. idx = 4 --> packed values are 4,5,6,7
        for end of input, rest of values are zero (e.g. idx = 8 for a 3x3, 24 for a 5x5)
    funct7 (25-31): 0b0000001
cust instruction: LoadKernel
    opcode (0-6): 0b0001011 (custom-0)
    rd (7-11): X
    funct3 (12-14): 0b011
    rs1 (15-19): ptr to memory address of packed kernel values
        val1 | val2 | val3 | val4
        each 16 bit fixed point 8.8 value is packed into a 64 bit word as above
    rs2 (20-24): (kernel index of val1) / 4
        e.g. idx = 4 --> packed values are 4,5,6,7
        for end of kernel, rest of values are zero (e.g. idx = 8 for a 3x3, 24 for a 5x5)
    funct7 (25-31): 0b0000010
cust instruction: doCompute
    opcode (0-6): 0b0001011 (custom-0)
    rd (7-11): X
    funct3 (12-14): 0b011
    rs1 (15-19): kernel size (1,3,5)
    rs2 (20-24): input tile type (topLeft :: top :: topRight :: left :: center :: right :: bottomLeft :: bottom :: bottomRight)
    funct7 (25-31): 0b0000011

chisel algorithm (1): manually input using poke, test 3x3 convolution
chisel algorithm (2): test zero padding 
chisel algorithm (3): test tile by tile convolution for 32x32

load in 64 bits, 16|16|16|16 for each kernel/input value
tag becomes idx1|idx2|idx3|idx4, if idx_ > 24, do nothing

packed kernel > dma style > input matrix


tiled:
output stationary -> load extra input, each output tile only loaded once
input stationary -> input loaded only once, output MAC'd for multiple iterations (less favourable as requires reading output and then adding)